// <auto-generated />
using CodeSoup.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodeSoup.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CodeSoup.Domain.Entites.Computador", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("MemoriaRAM")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Processador")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Computadores", (string)null);
                });

            modelBuilder.Entity("CodeSoup.Domain.Entites.Funcionario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TipoFuncionario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Funcionarios", (string)null);

                    b.HasDiscriminator<int>("TipoFuncionario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CodeSoup.Domain.Entites.Impressora", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("EMultifuncional")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TipoDeImpressao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Impressoras", (string)null);
                });

            modelBuilder.Entity("CodeSoup.Domain.Entites.Veiculo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Veiculos", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("CodeSoup.Domain.Entites.Empregado", b =>
                {
                    b.HasBaseType("CodeSoup.Domain.Entites.Funcionario");

                    b.Property<string>("Departamento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Salario")
                        .HasColumnType("double");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("CodeSoup.Domain.Entites.Freelancer", b =>
                {
                    b.HasBaseType("CodeSoup.Domain.Entites.Funcionario");

                    b.Property<string>("ProjetoAtual")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("TarifaPorHora")
                        .HasColumnType("double");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("CodeSoup.Domain.Entites.Carro", b =>
                {
                    b.HasBaseType("CodeSoup.Domain.Entites.Veiculo");

                    b.Property<int>("NumeroDePortas")
                        .HasColumnType("int");

                    b.Property<bool>("TemArCondicionado")
                        .HasColumnType("tinyint(1)");

                    b.ToTable("Carros", (string)null);
                });

            modelBuilder.Entity("CodeSoup.Domain.Entites.Moto", b =>
                {
                    b.HasBaseType("CodeSoup.Domain.Entites.Veiculo");

                    b.Property<bool>("TemTopCase")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TipoDeSuspensao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Motos", (string)null);
                });

            modelBuilder.Entity("CodeSoup.Domain.Entites.Carro", b =>
                {
                    b.HasOne("CodeSoup.Domain.Entites.Veiculo", null)
                        .WithOne()
                        .HasForeignKey("CodeSoup.Domain.Entites.Carro", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodeSoup.Domain.Entites.Moto", b =>
                {
                    b.HasOne("CodeSoup.Domain.Entites.Veiculo", null)
                        .WithOne()
                        .HasForeignKey("CodeSoup.Domain.Entites.Moto", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
